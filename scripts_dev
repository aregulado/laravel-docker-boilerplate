#!/bin/bash


#######################################
# FUNCTIONS
#######################################

# Run an Artisan command
artisan () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml run --rm php php artisan "${@:1}"
}

# Build all of the images or the specified one
build () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml build "${@:1}"
}

# Run a Composer command
composer () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml run --rm php composer "${@:1}"
}

# Remove the entire Docker environment
destroy () {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml down -v --rmi all --remove-orphans
}

# Stop and destroy all containers
down () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml down "${@:1}"
}

# Create .env from .env.dist
env () {
    if [ ! -f src/.env ]; then
        cp src/.env.example src/.env
    fi
}

# Initialise the Docker environment and the application
init () {
    env \
        && down -v \
        && build \
        && yarn install \
        && start \
        && migrate
}

# Display and tail the logs of all containers or the specified one's
logs () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml logs -f "${@:1}"
}

migrate () {
    docker-compose run --rm --entrypoint="//opt/files/local_init" php
}

# Restart the containers
restart () {
    stop && start
}

# Start the containers
start () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml up -d
}

# Stop the containers
stop () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml stop
}

# Update the Docker environment
update () {
    git pull \
        && build \
        && composer install \
        && artisan migrate \
        && start
}

# Run a Yarn command
yarn () {
    docker-compose -f docker-compose.dev.yml -f docker-compose.yml run --rm frontend yarn "${@:1}"
}


#######################################
# MENU
#######################################

case "$1" in
    artisan)
        artisan "${@:2}"
        ;;
    build)
        build "${@:2}"
        ;;
    composer)
        composer "${@:2}"
        ;;
    destroy)
        destroy
        ;;
    down)
        down "${@:2}"
        ;;
    init)
        init
        ;;
    logs)
        logs "${@:2}"
        ;;
    migrate)
        migrate
        ;;
    restart)
        restart
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    update)
        update
        ;;
    yarn)
        yarn "${@:2}"
        ;;
    *)
        cat << EOF
Command line interface for the Docker-based web development environment.
Usage:
    dev <command> [options] [arguments]
Available commands:
    artisan ................................... Run an Artisan command
    build [image] ............................. Build all of the images or the specified one
    composer .................................. Run a Composer command
    destroy ................................... Remove the entire Docker environment
    down [-v] ................................. Stop and destroy all containers
                                                Options:
                                                    -v .................... Destroy the volumes as well
    init ...................................... Initialise the local Docker environment and the application
    logs [container] .......................... Display and tail the logs of all containers or the specified one's
    migrate ................................... Migrate the database
    restart ................................... Restart the containers
    start ..................................... Start the containers
    stop ...................................... Stop the containers
    update .................................... Update the Docker environment
    yarn ...................................... Run a Yarn command
EOF
        exit
        ;;
esac